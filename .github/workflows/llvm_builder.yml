name: Halide LLVM Builder
on: push

jobs:
  build_llvm:
    name: Build LLVM llvm-${{matrix.llvm_version}} for ${{matrix.os}}-${{matrix.bits}}
    runs-on: ${{matrix.os}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}

    strategy:
      fail-fast: false  # Keep running even if one job fails
      matrix:
        arch: [x86]
        bits: [32, 64]
        os: [windows-latest, ubuntu-18.04, macos-latest]
        llvm_version: [8, 9, trunk]
        build_tool: [cmake_shared]
        include:
          - llvm_version: 8
            llvm_branch: release/8.x
          - llvm_version: 9
            llvm_branch: release/9.x
          - llvm_version: 10
            llvm_branch: release/10.x
          - llvm_version: trunk
            llvm_branch: master

          - os: macos-latest
            cc: clang
          - os: macos-latest
            cxx: clang++

          - os: ubuntu-18.04
            cc: gcc
          - os: ubuntu-18.04
            cxx: g++

          - os: windows-latest
            cc: cl
          - os: windows-latest
            cxx: cl
          - os: windows-latest
            cmake_gen: "Visual Studio 16"
          - os: windows-latest
            cmake_arch: "x64"
          - os: windows-latest
            cmake_toolset: "host=x64"

    steps:
    - name: Build llvm-${{matrix.llvm_version}}-${{matrix.os}}-${{matrix.bits}}
      shell: bash
      run: |
        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}

        export CC="${{matrix.cc}}"
        export CXX="${{matrix.cxx}}"

        LLVM_ID="llvm-${{matrix.llvm_version}}-${{matrix.arch}}-${{matrix.os}}-${{matrix.bits}}"
        LLVM_SOURCE_DIR="${_ROOT}/${LLVM_ID}-source"
        LLVM_BUILD_DIR="${_ROOT}/${LLVM_ID}-build"
        LLVM_INSTALL_DIR="${_ROOT}/${LLVM_ID}-install"
        LLVM_INSTALL_TGZ="${_ROOT}/${LLVM_ID}.tgz"
        LLVM_URL="https://buildbot.halide-lang.org/llvm/${LLVM_ID}.tgz"

        # TODO: for trunk, we should tag with git hash somehow -- in url?

        if curl --output /dev/null --head --silent --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} --fail ${LLVM_URL}; then

          echo "${LLVM_URL} already exists, no need to build"

        else

          echo "${LLVM_URL} not found, rebuilding"

          git clone https://github.com/llvm/llvm-project.git \
            "${LLVM_SOURCE_DIR}" \
            --branch ${{matrix.llvm_branch}} \
            --single-branch \
            --depth 1

          LLVM_BUILD_32_BITS=$([ ${{matrix.bits}} == 32 ] && echo "ON" || echo "OFF")

          # TODO: add WebAssembly for trunk
          # TODO: disable assertions for mingw?
          # TODO: LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS = FORCE_OFF for macos
          cmake \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_INSTALL_PREFIX="${LLVM_INSTALL_DIR}" \
            -D LLVM_BUILD_32_BITS=${LLVM_BUILD_32_BITS} \
            -D LLVM_ENABLE_ASSERTIONS=ON \
            -D LLVM_ENABLE_PROJECTS="clang;lld" \
            -D LLVM_ENABLE_RTTI=ON \
            -D LLVM_ENABLE_TERMINFO=OFF \
            -D LLVM_TARGETS_TO_BUILD="X86;ARM;NVPTX;AArch64;Mips;PowerPC;Hexagon" \
            -G "${{matrix.cmake_gen}}" \
            -A "${{matrix.cmake_arch}}" \
            -T "${{matrix.cmake_toolset}}" \
            -B "${LLVM_BUILD_DIR}" \
            -S "${LLVM_SOURCE_DIR}/llvm"

          PARALLEL_JOBS=$(expr $(nproc) + 2)
          cmake --build "${LLVM_BUILD_DIR}" -j ${PARALLEL_JOBS} --target install

          git log -n 1 > ${LLVM_INSTALL_DIR}/.halide_build_hash

          tar -czf ${LLVM_INSTALL_TGZ} ${LLVM_INSTALL_DIR}

          curl \
            --upload-file ${LLVM_INSTALL_TGZ} \
            --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} \
            ${LLVM_URL}

        fi

    # - name: Build zlib ${{matrix.os}} ${{matrix.bits}}
    #   shell: bash
    #   run: |
    #     # set -eux

    #     zlib_ID="zlib-${{matrix.os}}-${{matrix.bits}}"
    #     zlib_SOURCE_DIR="${GITHUB_WORKSPACE}/${zlib_ID}-source"
    #     zlib_BUILD_DIR="${GITHUB_WORKSPACE}/${zlib_ID}-build"
    #     zlib_INSTALL_DIR="${GITHUB_WORKSPACE}/${zlib_ID}-install"
    #     zlib_INSTALL_TGZ="${GITHUB_WORKSPACE}/${zlib_ID}.tgz"
    #     zlib_URL="${UPLOADS}/${zlib_ID}.tgz"

    #     which curl

    #     if curl --output /dev/null --head --silent --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} --fail ${zlib_URL}; then
    #       echo "${zlib_URL} already exists, no need to build"
    #     else
    #       echo "${zlib_URL} not found, rebuilding"

    #       git clone https://github.com/glennrp/zlib.git \
    #         "${zlib_SOURCE_DIR}" \
    #         --branch master \
    #         --single-branch \
    #         --depth 1

    #       cmake \
    #         -D CMAKE_BUILD_TYPE=Release \
    #         -D CMAKE_INSTALL_PREFIX="${zlib_INSTALL_DIR}" \
    #         -G "${{matrix.cmake_gen}}" \
    #         -A "${{matrix.cmake_arch}}" \
    #         -T "${{matrix.cmake_toolset}}" \
    #         -B "${zlib_BUILD_DIR}" \
    #         -S "${zlib_SOURCE_DIR}"

    #       cmake --build "${zlib_BUILD_DIR}" -j ${PARALLEL_JOBS} --target install

    #       tar -czf ${zlib_INSTALL_TGZ} ${zlib_INSTALL_DIR}

    #       curl \
    #         --upload-file ${zlib_INSTALL_TGZ} \
    #         --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} \
    #         ${zlib_URL}

    #     fi
