name: Halide LLVM Builder
on: push

jobs:
  build_llvm:
    name: Build llvm-${{matrix.llvm_version}}-${{matrix.bits}}-${{matrix.os}}
    runs-on: ${{matrix.os}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}

    strategy:
      fail-fast: true  # TODO # Keep running even if one job fails
      matrix:
        arch: [x86]
        # bits: [32, 64]
        bits: [64]
        # os: [windows-latest, ubuntu-18.04, macos-latest]
        os: [windows-latest]
        # llvm_version: [8, 9, trunk]
        llvm_version: [8]
        build_tool: [cmake_shared]
        include:
          - llvm_version: 8
            llvm_branch: release/8.x
          - llvm_version: 9
            llvm_branch: release/9.x
          - llvm_version: 10
            llvm_branch: release/10.x
          - llvm_version: trunk
            llvm_branch: master

          - os: macos-latest
            cc: clang
          - os: macos-latest
            cxx: clang++

          - os: ubuntu-18.04
            cc: gcc
          - os: ubuntu-18.04
            cxx: g++

          - os: windows-latest
            cc: cl
          - os: windows-latest
            cxx: cl
          - os: windows-latest
            cmake_gen: "Visual Studio 16"
          - os: windows-latest
            cmake_arch: "x64"
          - os: windows-latest
            cmake_toolset: "host=x64"

        exclude:
          # Don't attempt 32-bit builds for macos
          - os: macos-latest
            bits: 32
          # TODO
          - os: ubuntu-18.04
            bits: 32

    steps:
    - name: foo
      shell: powershell
      run:|
        $path = "$Env:Programfiles"
        $colItems = Get-ChildItem $path | Where-Object {$_.PSIsContainer -eq $true} | Sort-Object
        foreach ($i in $colItems)
        {
            $subFolderItems = Get-ChildItem $i.FullName -recurse -force | Where-Object {$_.PSIsContainer -eq $false} | Measure-Object -property Length -sum | Select-Object Sum
            $i.FullName + " -- " + "{0:N2}" -f ($subFolderItems.sum / 1MB) + " MB"
        }

    - name: Clean Up Windows
      if: startsWith(matrix.os, 'windows')
      shell: bash
      run: |
        # Remove preinstalled stuff on the Windows VM that takes a lot of
        # space but is unimportant to us (so that we have enough space to
        # actually build)
        set -eux

        # sudo rm -rf "C:/Program Files/Boost"
        # sudo rm -rf "C:/Program Files/Unity"

        echo "C"
        sudo du -h -d 2 "C:/Program Files"

        echo "C2"
        sudo du -h -d 2 "C:/Program Files (x86)"

        echo "D"
        sudo du -h -d 2 "D:/Program Files"

        echo "D2"
        sudo du -h -d 2 "D:/Program Files (x86)"

        exit 23

    - name: Build llvm-${{matrix.llvm_version}}-${{matrix.bits}}-${{matrix.os}}
      shell: bash
      run: |
        set -eux

        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}

        export CC="${{matrix.cc}}"
        export CXX="${{matrix.cxx}}"

        LLVM_ID="llvm-${{matrix.llvm_version}}-${{matrix.arch}}-${{matrix.os}}-${{matrix.bits}}"
        LLVM_SOURCE_DIR="${_ROOT}/${LLVM_ID}-source"
        LLVM_BUILD_DIR="${_ROOT}/${LLVM_ID}-build"
        LLVM_INSTALL_DIR="${_ROOT}/${LLVM_ID}-install"
        LLVM_INSTALL_TGZ="${_ROOT}/${LLVM_ID}.tgz"
        LLVM_URL="https://buildbot.halide-lang.org/llvm/${LLVM_ID}.tgz"

        # TODO: for trunk, we should tag with git hash somehow -- in url?

        if curl --output /dev/null --head --silent --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} --fail ${LLVM_URL}; then

          echo "${LLVM_URL} already exists, no need to build"

        else

          echo "${LLVM_URL} not found, rebuilding"

          git clone https://github.com/llvm/llvm-project.git \
            "${LLVM_SOURCE_DIR}" \
            --branch ${{matrix.llvm_branch}} \
            --single-branch \
            --depth 1

          du -h -d 2 ${LLVM_SOURCE_DIR}

          LLVM_BUILD_32_BITS=$([ ${{matrix.bits}} == 32 ] && echo "ON" || echo "OFF")

          CMAKE_GEN="${{matrix.cmake_gen}}"
          if [ -z "${CMAKE_GEN}" ]; then
            CMAKE_GEN="Unix Makefiles"
          fi

          # TODO: add WebAssembly for trunk
          # TODO: disable assertions for mingw?
          # TODO: LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN is evil
          # Note that LLVM_INSTALL_TOOLCHAIN_ONLY=ON is essential; without it,
          # we will run out of disk space (!) on the Windows VMs doing a normal build.
          cmake \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_INSTALL_PREFIX="${LLVM_INSTALL_DIR}" \
            -D LLVM_BUILD_32_BITS=${LLVM_BUILD_32_BITS} \
            -D LLVM_ENABLE_ASSERTIONS=ON \
            -D LLVM_ENABLE_PROJECTS="clang;lld" \
            -D LLVM_ENABLE_RTTI=ON \
            -D LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS=FORCE_OFF \
            -D LLVM_ENABLE_TERMINFO=OFF \
            -D LLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -D LLVM_TARGETS_TO_BUILD="X86;ARM;NVPTX;AArch64;Mips;PowerPC;Hexagon" \
            -D LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \
            -G "${CMAKE_GEN}" \
            -A "${{matrix.cmake_arch}}" \
            -T "${{matrix.cmake_toolset}}" \
            -B "${LLVM_BUILD_DIR}" \
            -S "${LLVM_SOURCE_DIR}/llvm"

          PARALLEL_JOBS=4
          cmake --build "${LLVM_BUILD_DIR}" -j ${PARALLEL_JOBS} --target install

          du -h -d 2 ${LLVM_BUILD_DIR}
          du -h -d 2 ${LLVM_INSTALL_DIR}

          cd ${LLVM_SOURCE_DIR}
          git log -n 1 > ${LLVM_INSTALL_DIR}/.halide_build_hash

          tar -czf ${LLVM_INSTALL_TGZ} ${LLVM_INSTALL_DIR}

          curl \
            --upload-file ${LLVM_INSTALL_TGZ} \
            --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} \
            ${LLVM_URL}

        fi

    - name: Report llvm-${{matrix.llvm_version}}-${{matrix.bits}}-${{matrix.os}}
      if: failure()
      shell: bash
      run: |
        set -eux

        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}

        LLVM_ID="llvm-${{matrix.llvm_version}}-${{matrix.arch}}-${{matrix.os}}-${{matrix.bits}}"
        LLVM_SOURCE_DIR="${_ROOT}/${LLVM_ID}-source"
        LLVM_BUILD_DIR="${_ROOT}/${LLVM_ID}-build"
        LLVM_INSTALL_DIR="${_ROOT}/${LLVM_ID}-install"

        echo LLVM_SOURCE_DIR
        du -h -d 2 ${LLVM_SOURCE_DIR}

        echo LLVM_BUILD_DIR
        du -h -d 2 ${LLVM_BUILD_DIR}

        echo LLVM_INSTALL_DIR
        du -h -d 2 ${LLVM_INSTALL_DIR}



